{% assign ai_gen_id = section.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-grid-{{ ai_gen_id }} {
    padding: {{ section.settings.section_padding }}px 0;
    background-color: {{ section.settings.background_color }};
    width: 100%;
  }

  .ai-video-grid-container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-video-grid-heading-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: {{ section.settings.grid_gap }}px;
    color: {{ section.settings.text_color }};
    font-size: {{ section.settings.heading_size }}px;
  }

  .ai-video-grid-wrapper-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ section.settings.columns_desktop }}, 1fr);
    gap: {{ section.settings.grid_gap }}px;
  }

  .ai-video-item-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: {{ section.settings.aspect_ratio }};
    border-radius: {{ section.settings.border_radius }}px;
    overflow: hidden;
    background-color: #f4f4f4;
  }

  .ai-video-item-{{ ai_gen_id }} video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-video-overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,{{ section.settings.overlay_opacity | divided_by: 100.0 }}) 100%);
    display: flex;
    align-items: flex-end;
    padding: 20px;
    color: white;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .ai-video-item-{{ ai_gen_id }}:hover .ai-video-overlay-{{ ai_gen_id }} {
    opacity: 1;
  }

  .ai-video-overlay-content-{{ ai_gen_id }} {
    width: 100%;
  }

  .ai-video-overlay-title-{{ ai_gen_id }} {
    font-size: {{ section.settings.overlay_title_size }}px;
    font-weight: 600;
    margin: 0 0 8px;
  }

  .ai-video-overlay-description-{{ ai_gen_id }} {
    font-size: {{ section.settings.overlay_text_size }}px;
    margin: 0;
    opacity: 0.9;
  }

  .ai-video-play-button-{{ ai_gen_id }} {
    position: absolute;
    top: 50%; left: 50%;
    transform: translate(-50%, -50%);
    width: 60px; height: 60px;
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    border: none;
    cursor: pointer;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .ai-video-play-button-{{ ai_gen_id }} svg {
    width: 24px;
    height: 24px;
    margin-left: 2px;
  }

  .ai-video-item-{{ ai_gen_id }}.playing .ai-video-play-button-{{ ai_gen_id }} {
    opacity: 0;
    pointer-events: none;
  }

  @media screen and (max-width: 768px) {
    .ai-video-grid-wrapper-{{ ai_gen_id }} {
      grid-template-columns: repeat({{ section.settings.columns_mobile }}, 1fr);
    }
    .ai-video-overlay-{{ ai_gen_id }} {
      padding: 15px;
    }
    .ai-video-play-button-{{ ai_gen_id }} {
      width: 50px;
      height: 50px;
    }
    .ai-video-play-button-{{ ai_gen_id }} svg {
      width: 20px;
      height: 20px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-video-grid-wrapper-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
    }
  }
{% endstyle %}

<video-grid-{{ ai_gen_id }} class="ai-video-grid-{{ ai_gen_id }}" {{ section.shopify_attributes }}>
  <div class="ai-video-grid-container-{{ ai_gen_id }}">
    {% if section.settings.heading != blank %}
      <h2 class="ai-video-grid-heading-{{ ai_gen_id }}">{{ section.settings.heading }}</h2>
    {% endif %}
    <div class="ai-video-grid-wrapper-{{ ai_gen_id }}">
      {% for block in section.blocks %}
        {% assign video = block.settings.video %}
        {% assign title = block.settings.title %}
        {% assign description = block.settings.description %}

        {% if video != blank %}
          <div class="ai-video-item-{{ ai_gen_id }}">
            {{ video | video_tag:
              autoplay: section.settings.autoplay,
              muted: section.settings.muted,
              loop: section.settings.loop,
              controls: false,
              playsinline: true,
              preload: 'metadata'
            }}

            {% unless section.settings.autoplay %}
              <button class="ai-video-play-button-{{ ai_gen_id }}" aria-label="Play video">
                <svg viewBox="0 0 24 24" fill="currentColor">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>
            {% endunless %}

            {% if title != blank or description != blank %}
              <div class="ai-video-overlay-{{ ai_gen_id }}">
                <div class="ai-video-overlay-content-{{ ai_gen_id }}">
                  {% if title != blank %}
                    <h3 class="ai-video-overlay-title-{{ ai_gen_id }}">{{ title }}</h3>
                  {% endif %}
                  {% if description != blank %}
                    <p class="ai-video-overlay-description-{{ ai_gen_id }}">{{ description }}</p>
                  {% endif %}
                </div>
              </div>
            {% endif %}
          </div>
        {% elsif i <= 3 %}
          <div class="ai-video-item-{{ ai_gen_id }}">
            <div class="ai-video-placeholder-{{ ai_gen_id }}">
              <svg viewBox="0 0 24 24" fill="currentColor">
                <path d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"/>
              </svg>
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>
</video-grid-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoGrid{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.setupVideoControls();
      }

      setupVideoControls() {
        const playButtons = this.querySelectorAll('.ai-video-play-button-{{ ai_gen_id }}');
        const videoItems = this.querySelectorAll('.ai-video-item-{{ ai_gen_id }}');

        playButtons.forEach((button, index) => {
          const videoItem = videoItems[index];
          const video = videoItem.querySelector('video');

          if (video) {
            button.addEventListener('click', () => {
              this.pauseAllVideos();
              video.play();videoItem.classList.add('playing');
            });

            video.addEventListener('pause', () => {
              videoItem.classList.remove('playing');
            });

            video.addEventListener('ended', () => {
              videoItem.classList.remove('playing');
            });

            video.addEventListener('click', () => {
              if (video.paused) {
                this.pauseAllVideos();video.play();
                videoItem.classList.add('playing');
              } else {
                video.pause();
                videoItem.classList.remove('playing');
              }
            });
          }
        });
      }

      pauseAllVideos() {
        const videos = this.querySelectorAll('video');
        const videoItems = this.querySelectorAll('.ai-video-item-{{ ai_gen_id }}');

        videos.forEach(video => {
          if (!video.paused) {
            video.pause();
          }
        });

        videoItems.forEach(item => {
          item.classList.remove('playing');
        });
      }
    }

    customElements.define('video-grid-{{ ai_gen_id }}', VideoGrid{{ ai_gen_id }});
  })();
</script>


                  

{% schema %}
{
  "name": "Video Grid",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Video Gallery"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 50
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    },
    {
      "type": "select",
      "id": "columns_desktop",
      "label": "Columns on desktop",
      "options": [
        { "value": "2", "label": "2" },
        { "value": "3", "label": "3" },
        { "value": "4", "label": "4" }
      ],
      "default": "3"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Columns on mobile",
      "options": [
        { "value": "1", "label": "1" },
        { "value": "2", "label": "2" }
      ],
      "default": "1"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Video aspect ratio",
      "options": [
        { "value": "16/9", "label": "16:9" },
        { "value": "4/3", "label": "4:3" },
        { "value": "1/1", "label": "1:1" },
        { "value": "9/16", "label": "9:16" }
      ],
      "default": "16/9"
    },
    {
      "type": "range",
      "id": "grid_gap",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Grid gap",
      "default": 20
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay videos",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "muted",
      "label": "Mute videos",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "Loop videos",
      "default": true
    },
    {
      "type": "range",
      "id": "overlay_opacity",
      "label": "Overlay opacity",
      "min": 0,
      "max": 100,
      "step": 10,
      "unit": "%",
      "default": 60
    },
    {
      "type": "range",
      "id": "overlay_title_size",
      "label": "Overlay title size",
      "min": 14,
      "max": 24,
      "step": 1,
      "unit": "px",
      "default": 18
    },
    {
      "type": "range",
      "id": "overlay_text_size",
      "label": "Overlay text size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "default": 14
    }
  ],
  "blocks": [
    {
      "type": "video_item",
      "name": "Video",
      "settings": [
        {
          "type": "video",
          "id": "video",
          "label": "Video"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title"
        },
        {
          "type": "text",
          "id": "description",
          "label": "Description"
        }
      ]
    }
  ],
  "max_blocks": 12,
  "presets": [
    {
      "name": "Video Grid",
      "category": "Media"
    }
  ]
}
{% endschema %}
