{% doc %}
  @prompt
    Create a video carousel section with autoplay functionality. The section should allow merchants to add multiple videos that automatically start playing when they come into view. Include navigation controls to move between videos and ensure the carousel is responsive across different screen sizes.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-carousel-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 100%;
    background-color: {{ block.settings.background_color }};
    padding: {{ block.settings.section_padding }}px 0;
  }

  .ai-video-carousel__container-{{ ai_gen_id }} {
    position: relative;
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-video-carousel__wrapper-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
    background-color: #000;
  }

  .ai-video-carousel__track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease;
    width: 100%;
  }

  .ai-video-carousel__slide-{{ ai_gen_id }} {
    flex: 0 0 100%;
    position: relative;
    aspect-ratio: {{ block.settings.aspect_ratio }};
  }

  .ai-video-carousel__video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .ai-video-carousel__video-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
    font-size: 18px;
  }

  .ai-video-carousel__controls-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: {{ block.settings.control_background }};
    border: none;
    border-radius: 50%;
    width: {{ block.settings.control_size }}px;
    height: {{ block.settings.control_size }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: {{ block.settings.control_color }};
    opacity: {{ block.settings.control_opacity | divided_by: 100.0 }};
    transition: opacity 0.3s ease, transform 0.2s ease;
    z-index: 2;
  }

  .ai-video-carousel__controls-{{ ai_gen_id }}:hover {
    opacity: 1;
    transform: translateY(-50%) scale(1.1);
  }

  .ai-video-carousel__controls-{{ ai_gen_id }}:focus {
    outline: 2px solid {{ block.settings.control_color }};
    outline-offset: 2px;
  }

  .ai-video-carousel__prev-{{ ai_gen_id }} {
    left: 20px;
  }

  .ai-video-carousel__next-{{ ai_gen_id }} {
    right: 20px;
  }

  .ai-video-carousel__dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 12px;
    margin-top: 20px;
  }

  .ai-video-carousel__dot-{{ ai_gen_id }} {
    width: {{ block.settings.dot_size }}px;
    height: {{ block.settings.dot_size }}px;
    border-radius: 50%;
    border: none;
    background-color: {{ block.settings.dot_inactive_color }};
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
  }

  .ai-video-carousel__dot-{{ ai_gen_id }}:hover {
    transform: scale(1.2);
  }

  .ai-video-carousel__dot-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.dot_active_color }};
  }

  .ai-video-carousel__play-pause-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 20px;
    background-color: {{ block.settings.control_background }};
    border: none;
    border-radius: 50%;
    width: {{ block.settings.control_size }}px;
    height: {{ block.settings.control_size }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: {{ block.settings.control_color }};
    opacity: {{ block.settings.control_opacity | divided_by: 100.0 }};
    transition: opacity 0.3s ease, transform 0.2s ease;
    z-index: 2;
  }

  .ai-video-carousel__play-pause-{{ ai_gen_id }}:hover {
    opacity: 1;
    transform: scale(1.1);
  }

  .ai-video-carousel__play-pause-{{ ai_gen_id }}:focus {
    outline: 2px solid {{ block.settings.control_color }};
    outline-offset: 2px;
  }

  @media screen and (max-width: 768px) {
    .ai-video-carousel__container-{{ ai_gen_id }} {
      padding: 0 15px;
    }

    .ai-video-carousel__controls-{{ ai_gen_id }} {
      width: {{ block.settings.control_size | times: 0.8 }}px;
      height: {{ block.settings.control_size | times: 0.8 }}px;
    }

    .ai-video-carousel__prev-{{ ai_gen_id }} {
      left: 10px;
    }

    .ai-video-carousel__next-{{ ai_gen_id }} {
      right: 10px;
    }

    .ai-video-carousel__play-pause-{{ ai_gen_id }} {
      width: {{ block.settings.control_size | times: 0.8 }}px;
      height: {{ block.settings.control_size | times: 0.8 }}px;
      bottom: 15px;
      left: 15px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-video-carousel__container-{{ ai_gen_id }} {
      padding: 0 10px;
    }

    .ai-video-carousel__controls-{{ ai_gen_id }} {
      width: {{ block.settings.control_size | times: 0.7 }}px;
      height: {{ block.settings.control_size | times: 0.7 }}px;
    }

    .ai-video-carousel__prev-{{ ai_gen_id }} {
      left: 5px;
    }

    .ai-video-carousel__next-{{ ai_gen_id }} {
      right: 5px;
    }

    .ai-video-carousel__play-pause-{{ ai_gen_id }} {
      width: {{ block.settings.control_size | times: 0.7 }}px;
      height: {{ block.settings.control_size | times: 0.7 }}px;
      bottom: 10px;
      left: 10px;
    }

    .ai-video-carousel__dots-{{ ai_gen_id }} {
      gap: 8px;
      margin-top: 15px;
    }

    .ai-video-carousel__dot-{{ ai_gen_id }} {
      width: {{ block.settings.dot_size | times: 0.8 }}px;
      height: {{ block.settings.dot_size | times: 0.8 }}px;
    }
  }
{% endstyle %}

<video-carousel-{{ ai_gen_id }}
  class="ai-video-carousel-{{ ai_gen_id }}"
  data-autoplay="{{ block.settings.autoplay }}"
  data-autoplay-delay="{{ block.settings.autoplay_delay }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-carousel__container-{{ ai_gen_id }}">
    <div class="ai-video-carousel__wrapper-{{ ai_gen_id }}">
      <div class="ai-video-carousel__track-{{ ai_gen_id }}">
        {% for i in (1..5) %}
          {% assign video_key = 'video_' | append: i %}
          {% assign video = block.settings[video_key] %}
          
          {% if video != blank %}
            <div class="ai-video-carousel__slide-{{ ai_gen_id }}" data-slide="{{ forloop.index0 }}">
              <video
                class="ai-video-carousel__video-{{ ai_gen_id }}"
                {% if block.settings.autoplay %}autoplay{% endif %}
                muted
                loop
                playsinline
                preload="metadata"
                data-video-index="{{ forloop.index0 }}"
              >
                <source src="{{ video }}" type="video/mp4">
                Your browser does not support the video tag.
              </video>
            </div>
          {% endif %}
        {% endfor %}
        
        {% if block.settings.video_1 == blank and block.settings.video_2 == blank and block.settings.video_3 == blank and block.settings.video_4 == blank and block.settings.video_5 == blank %}
          <div class="ai-video-carousel__slide-{{ ai_gen_id }}">
            <div class="ai-video-carousel__video-placeholder-{{ ai_gen_id }}">
              No videos added yet
            </div>
          </div>
        {% endif %}
      </div>

      {% assign video_count = 0 %}
      {% for i in (1..5) %}
        {% assign video_key = 'video_' | append: i %}
        {% if block.settings[video_key] != blank %}
          {% assign video_count = video_count | plus: 1 %}
        {% endif %}
      {% endfor %}

      {% if video_count > 1 %}
        <button
          class="ai-video-carousel__controls-{{ ai_gen_id }} ai-video-carousel__prev-{{ ai_gen_id }}"
          aria-label="Previous video"
          type="button"
        >
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>

        <button
          class="ai-video-carousel__controls-{{ ai_gen_id }} ai-video-carousel__next-{{ ai_gen_id }}"
          aria-label="Next video"
          type="button"
        >
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>

        {% if block.settings.show_play_pause %}
          <button
            class="ai-video-carousel__play-pause-{{ ai_gen_id }}"
            aria-label="Play/Pause video"
            type="button"
          >
            <svg class="play-icon" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
              <polygon points="5,3 19,12 5,21"></polygon>
            </svg>
            <svg class="pause-icon" width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style="display: none;">
              <rect x="6" y="4" width="4" height="16"></rect>
              <rect x="14" y="4" width="4" height="16"></rect>
            </svg>
          </button>
        {% endif %}
      {% endif %}
    </div>

    {% if video_count > 1 and block.settings.show_dots %}
      <div class="ai-video-carousel__dots-{{ ai_gen_id }}">
        {% for i in (1..5) %}
          {% assign video_key = 'video_' | append: i %}
          {% if block.settings[video_key] != blank %}
            <button
              class="ai-video-carousel__dot-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}"
              aria-label="Go to video {{ forloop.index }}"
              data-slide="{{ forloop.index | minus: 1 }}"
              type="button"
            ></button>
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}
  </div>
</video-carousel-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.autoplayInterval = null;
        this.isPlaying = true;
        this.observer = null;
      }

      connectedCallback() {
        this.track = this.querySelector('.ai-video-carousel__track-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.ai-video-carousel__slide-{{ ai_gen_id }}');
        this.videos = this.querySelectorAll('.ai-video-carousel__video-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-video-carousel__prev-{{ ai_gen_id }}');
        this.nextButton = this.querySelector('.ai-video-carousel__next-{{ ai_gen_id }}');
        this.dots = this.querySelectorAll('.ai-video-carousel__dot-{{ ai_gen_id }}');
        this.playPauseButton = this.querySelector('.ai-video-carousel__play-pause-{{ ai_gen_id }}');
        
        this.autoplay = this.dataset.autoplay === 'true';
        this.autoplayDelay = parseInt(this.dataset.autoplayDelay) * 1000;

        this.setupEventListeners();
        this.setupIntersectionObserver();
        this.updateSlide();
        
        if (this.autoplay && this.slides.length > 1) {
          this.startAutoplay();
        }
      }

      disconnectedCallback() {
        this.stopAutoplay();if (this.observer) {
          this.observer.disconnect();
        }
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.prevSlide());
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.nextSlide());
        }

        this.dots.forEach((dot, index) => {
          dot.addEventListener('click', () => this.goToSlide(index));
        });

        if (this.playPauseButton) {
          this.playPauseButton.addEventListener('click', () => this.togglePlayPause());
        }

        this.videos.forEach(video => {
          video.addEventListener('loadedmetadata', () => {
            if (video.dataset.videoIndex == this.currentSlide) {
              this.updatePlayPauseButton();
            }
          });
        });

        this.addEventListener('mouseenter', () => this.stopAutoplay());
        this.addEventListener('mouseleave', () => {
          if (this.autoplay && this.slides.length > 1) {
            this.startAutoplay();
          }
        });
      }

      setupIntersectionObserver() {
        this.observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              this.playCurrentVideo();
            } else {
              this.pauseAllVideos();
            }
          });
        }, { threshold: 0.5 });

        this.observer.observe(this);
      }

      prevSlide() {
        this.currentSlide = this.currentSlide === 0 ? this.slides.length - 1 : this.currentSlide - 1;
        this.updateSlide();
      }

      nextSlide() {
        this.currentSlide = this.currentSlide === this.slides.length - 1 ? 0 : this.currentSlide + 1;
        this.updateSlide();
      }

      goToSlide(index) {
        this.currentSlide = index;
        this.updateSlide();
      }

      updateSlide() {
        const translateX = -this.currentSlide * 100;
        this.track.style.transform = `translateX(${translateX}%)`;

        this.dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === this.currentSlide);
        });

        this.pauseAllVideos();
        this.playCurrentVideo();
        this.updatePlayPauseButton();
      }

      playCurrentVideo() {
        const currentVideo = this.videos[this.currentSlide];
        if (currentVideo) {
          currentVideo.play().catch(() => {});this.isPlaying = true;
        }
      }

      pauseAllVideos() {
        this.videos.forEach(video => {
          video.pause();
        });
        this.isPlaying = false;
      }

      togglePlayPause() {
        const currentVideo = this.videos[this.currentSlide];
        if (currentVideo) {
          if (currentVideo.paused) {
            currentVideo.play().catch(() => {});
            this.isPlaying = true;
          } else {
            currentVideo.pause();
            this.isPlaying = false;
          }
          this.updatePlayPauseButton();
        }
      }

      updatePlayPauseButton() {
        if (!this.playPauseButton) return;
        
        const playIcon = this.playPauseButton.querySelector('.play-icon');
        const pauseIcon = this.playPauseButton.querySelector('.pause-icon');
        const currentVideo = this.videos[this.currentSlide];
        
        if (currentVideo && !currentVideo.paused) {
          playIcon.style.display = 'none';
          pauseIcon.style.display = 'block';
        } else {
          playIcon.style.display = 'block';
          pauseIcon.style.display = 'none';
        }
      }

      startAutoplay() {
        this.stopAutoplay();
        if (this.slides.length > 1) {
          this.autoplayInterval = setInterval(() => {
            this.nextSlide();
          }, this.autoplayDelay);
        }
      }

      stopAutoplay() {
        if (this.autoplayInterval) {
          clearInterval(this.autoplayInterval);
          this.autoplayInterval = null;
        }
      }
    }

    customElements.define('video-carousel-{{ ai_gen_id }}', VideoCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Video Carousel",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Videos"
    },
    {
      "type": "video",
      "id": "video_1",
      "label": "Video 1"
    },
    {
      "type": "video",
      "id": "video_2",
      "label": "Video 2"
    },
    {
      "type": "video",
      "id": "video_3",
      "label": "Video 3"
    },
    {
      "type": "video",
      "id": "video_4",
      "label": "Video 4"
    },
    {
      "type": "video",
      "id": "video_5",
      "label": "Video 5"
    },
    {
      "type": "header",
      "content": "Autoplay Settings"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Enable autoplay",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_delay",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Autoplay delay",
      "default": 5
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Video aspect ratio",
      "options": [
        {
          "value": "16/9",
          "label": "16:9 (Landscape)"
        },
        {
          "value": "4/3",
          "label": "4:3 (Standard)"
        },
        {
          "value": "1/1",
          "label": "1:1 (Square)"
        },
        {
          "value": "9/16",
          "label": "9:16 (Portrait)"
        }
      ],
      "default": "16/9"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 600,
      "max": 1400,
      "step": 50,
      "unit": "px",
      "label": "Maximum width",
      "default": 1200
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Controls"
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dot navigation",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_play_pause",
      "label": "Show play/pause button",
      "default": true
    },
    {
      "type": "range",
      "id": "control_size",
      "min": 30,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Control button size",
      "default": 44
    },
    {
      "type": "range",
      "id": "control_opacity",
      "min": 50,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Control opacity",
      "default": 80
    },
    {
      "type": "range",
      "id": "dot_size",
      "min": 8,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Dot size",
      "default": 12
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "control_background",
      "label": "Control background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "control_color",
      "label": "Control icon color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active dot color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "dot_inactive_color",
      "label": "Inactive dot color",
      "default": "#cccccc"
    }
  ],
  "presets": [
    {
      "name": "Video Carousel"
    }
  ]
}
{% endschema %}