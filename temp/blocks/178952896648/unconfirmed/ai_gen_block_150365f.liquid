{% doc %}
  @prompt
    Create a video slider section with customizable video blocks that allows merchants to add multiple videos in a sliding carousel format. Include controls for autoplay, loop settings, video titles, and navigation arrows.video add in video block, video is noy play video every time play

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-slider-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-slider__container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.video_height }}px;
  }

  .ai-video-slider__track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease;
    height: 100%;
  }

  .ai-video-slider__slide-{{ ai_gen_id }} {
    flex: 0 0 100%;
    position: relative;
    height: 100%;
  }

  .ai-video-slider__video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-slider__title-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 20px;
    right: 20px;
    color: {{ block.settings.title_color }};
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    background: rgba(0, 0, 0, 0.7);
    padding: 12px 16px;
    border-radius: 8px;
    margin: 0;
  }

  .ai-video-slider__nav-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    transition: background 0.3s ease;
  }

  .ai-video-slider__nav-{{ ai_gen_id }}:hover {
    background: rgba(255, 255, 255, 1);
  }

  .ai-video-slider__nav--prev-{{ ai_gen_id }} {
    left: 20px;
  }

  .ai-video-slider__nav--next-{{ ai_gen_id }} {
    right: 20px;
  }

  .ai-video-slider__nav-{{ ai_gen_id }} svg {
    width: 24px;
    height: 24px;
    color: #000;
  }

  .ai-video-slider__dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 20px;
  }

  .ai-video-slider__dot-{{ ai_gen_id }} {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.3);
    border: none;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .ai-video-slider__dot-{{ ai_gen_id }}.active {
    background: {{ block.settings.dot_active_color }};
  }

  .ai-video-slider__controls-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    right: 20px;
    display: flex;
    gap: 8px;
    z-index: 2;
  }

  .ai-video-slider__control-btn-{{ ai_gen_id }} {
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s ease;
  }

  .ai-video-slider__control-btn-{{ ai_gen_id }}:hover {
    background: rgba(255, 255, 255, 1);
  }

  .ai-video-slider__control-btn-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
    color: #000;
  }

  @media screen and (max-width: 749px) {
    .ai-video-slider__container-{{ ai_gen_id }} {
      height: {{ block.settings.video_height | times: 0.7 }}px;
    }

    .ai-video-slider__nav-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-video-slider__nav-{{ ai_gen_id }} svg {
      width: 20px;
      height: 20px;
    }

    .ai-video-slider__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size | times: 0.9 }}px;
      bottom: 15px;
      left: 15px;
      right: 15px;
    }
  }
{% endstyle %}

<video-slider-{{ ai_gen_id }}
  class="ai-video-slider-{{ ai_gen_id }}"
  data-autoplay="{{ block.settings.autoplay }}"
  data-autoplay-delay="{{ block.settings.autoplay_delay }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-slider__container-{{ ai_gen_id }}">
    <div class="ai-video-slider__track-{{ ai_gen_id }}">
      {% if block.settings.video_1 != blank %}
        <div class="ai-video-slider__slide-{{ ai_gen_id }}">
          <video
            class="ai-video-slider__video-{{ ai_gen_id }}"
            {% if block.settings.loop %}loop{% endif %}
            {% if block.settings.muted %}muted{% endif %}
            controls
            preload="metadata"
            playsinline
          >
            <source src="{{ block.settings.video_1.sources[1].url }}" type="{{ block.settings.video_1.sources[1].mime_type }}">
          </video>
          {% if block.settings.video_1_title != blank %}
            <h3 class="ai-video-slider__title-{{ ai_gen_id }}">{{ block.settings.video_1_title }}</h3>
          {% endif %}
        </div>
      {% endif %}

      {% if block.settings.video_2 != blank %}
        <div class="ai-video-slider__slide-{{ ai_gen_id }}">
          <video
            class="ai-video-slider__video-{{ ai_gen_id }}"
            {% if block.settings.loop %}loop{% endif %}
            {% if block.settings.muted %}muted{% endif %}
            controls
            preload="metadata"
            playsinline
          >
            <source src="{{ block.settings.video_2.sources[1].url }}" type="{{ block.settings.video_2.sources[1].mime_type }}">
          </video>
          {% if block.settings.video_2_title != blank %}
            <h3 class="ai-video-slider__title-{{ ai_gen_id }}">{{ block.settings.video_2_title }}</h3>
          {% endif %}
        </div>
      {% endif %}

      {% if block.settings.video_3 != blank %}
        <div class="ai-video-slider__slide-{{ ai_gen_id }}">
          <video
            class="ai-video-slider__video-{{ ai_gen_id }}"
            {% if block.settings.loop %}loop{% endif %}
            {% if block.settings.muted %}muted{% endif %}
            controls
            preload="metadata"
            playsinline
          >
            <source src="{{ block.settings.video_3.sources[1].url }}" type="{{ block.settings.video_3.sources[1].mime_type }}">
          </video>
          {% if block.settings.video_3_title != blank %}
            <h3 class="ai-video-slider__title-{{ ai_gen_id }}">{{ block.settings.video_3_title }}</h3>
          {% endif %}
        </div>
      {% endif %}

      {% if block.settings.video_4 != blank %}
        <div class="ai-video-slider__slide-{{ ai_gen_id }}">
          <video
            class="ai-video-slider__video-{{ ai_gen_id }}"
            {% if block.settings.loop %}loop{% endif %}
            {% if block.settings.muted %}muted{% endif %}
            controls
            preload="metadata"
            playsinline
          >
            <source src="{{ block.settings.video_4.sources[1].url }}" type="{{ block.settings.video_4.sources[1].mime_type }}">
          </video>
          {% if block.settings.video_4_title != blank %}
            <h3 class="ai-video-slider__title-{{ ai_gen_id }}">{{ block.settings.video_4_title }}</h3>
          {% endif %}
        </div>
      {% endif %}

      {% if block.settings.video_5 != blank %}
        <div class="ai-video-slider__slide-{{ ai_gen_id }}">
          <video
            class="ai-video-slider__video-{{ ai_gen_id }}"
            {% if block.settings.loop %}loop{% endif %}
            {% if block.settings.muted %}muted{% endif %}
            controls
            preload="metadata"
            playsinline
          >
            <source src="{{ block.settings.video_5.sources[1].url }}" type="{{ block.settings.video_5.sources[1].mime_type }}">
          </video>
          {% if block.settings.video_5_title != blank %}
            <h3 class="ai-video-slider__title-{{ ai_gen_id }}">{{ block.settings.video_5_title }}</h3>
          {% endif %}
        </div>
      {% endif %}
    </div>

    {% if block.settings.show_navigation %}
      <button class="ai-video-slider__nav-{{ ai_gen_id }} ai-video-slider__nav--prev-{{ ai_gen_id }}" aria-label="Previous video">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>
      <button class="ai-video-slider__nav-{{ ai_gen_id }} ai-video-slider__nav--next-{{ ai_gen_id }}" aria-label="Next video">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
    {% endif %}

    {% if block.settings.show_video_controls %}
      <div class="ai-video-slider__controls-{{ ai_gen_id }}">
        <button class="ai-video-slider__control-btn-{{ ai_gen_id }} ai-video-slider__play-pause-{{ ai_gen_id }}" aria-label="Play/Pause">
          <svg class="play-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="5,3 19,12 5,21"></polygon>
          </svg>
          <svg class="pause-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="6" y="4" width="4" height="16"></rect>
            <rect x="14" y="4" width="4" height="16"></rect>
          </svg>
        </button>
        <button class="ai-video-slider__control-btn-{{ ai_gen_id }} ai-video-slider__mute-{{ ai_gen_id }}" aria-label="Mute/Unmute">
          <svg class="volume-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
            <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
          </svg>
          <svg class="mute-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
            <line x1="23" y1="9" x2="17" y2="15"></line>
            <line x1="17" y1="9" x2="23" y2="15"></line>
          </svg>
        </button>
      </div>
    {% endif %}
  </div>

  {% if block.settings.show_dots %}
    <div class="ai-video-slider__dots-{{ ai_gen_id }}"></div>
  {% endif %}
</video-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.autoplayInterval = null;
        this.isAutoplay = this.dataset.autoplay === 'true';
        this.autoplayDelay = parseInt(this.dataset.autoplayDelay) * 1000;
        this.isPlaying = false;
      }

      connectedCallback() {
        this.track = this.querySelector('.ai-video-slider__track-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.ai-video-slider__slide-{{ ai_gen_id }}');
        this.prevBtn = this.querySelector('.ai-video-slider__nav--prev-{{ ai_gen_id }}');
        this.nextBtn = this.querySelector('.ai-video-slider__nav--next-{{ ai_gen_id }}');
        this.dotsContainer = this.querySelector('.ai-video-slider__dots-{{ ai_gen_id }}');
        this.playPauseBtn = this.querySelector('.ai-video-slider__play-pause-{{ ai_gen_id }}');
        this.muteBtn = this.querySelector('.ai-video-slider__mute-{{ ai_gen_id }}');

        if (this.slides.length === 0) return;

        this.setupDots();
        this.setupEventListeners();
        this.updateSlider();

        if (this.isAutoplay) {
          this.startAutoplay();
        }
      }

      setupDots() {
        if (!this.dotsContainer) return;

        this.slides.forEach((_, index) => {
          const dot = document.createElement('button');
          dot.className = `ai-video-slider__dot-{{ ai_gen_id }}`;
          dot.setAttribute('aria-label', `Go to video ${index + 1}`);
          dot.addEventListener('click', () => this.goToSlide(index));
          this.dotsContainer.appendChild(dot);
        });
      }

      setupEventListeners() {
        if (this.prevBtn) {
          this.prevBtn.addEventListener('click', () => this.prevSlide());
        }

        if (this.nextBtn) {
          this.nextBtn.addEventListener('click', () => this.nextSlide());
        }

        if (this.playPauseBtn) {
          this.playPauseBtn.addEventListener('click', () => this.togglePlayPause());
        }

        if (this.muteBtn) {
          this.muteBtn.addEventListener('click', () => this.toggleMute());
        }

        this.slides.forEach((slide) => {
          const video = slide.querySelector('video');
          if (video) {
            video.addEventListener('ended', () => {
              this.isPlaying = false;
              this.updatePlayPauseButton();
              if (this.isAutoplay) {
                this.nextSlide();
              }
            });

            video.addEventListener('play', () => {
              this.isPlaying = true;
              this.updatePlayPauseButton();
            });

            video.addEventListener('pause', () => {
              this.isPlaying = false;
              this.updatePlayPauseButton();
            });

            video.addEventListener('loadedmetadata', () => {
              this.updatePlayPauseButton();
              this.updateMuteButton();
            });
          }
        });
      }

      updateSlider() {
        if (!this.track) return;

        this.track.style.transform = `translateX(-${this.currentSlide * 100}%)`;

        const dots = this.querySelectorAll('.ai-video-slider__dot-{{ ai_gen_id }}');
        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === this.currentSlide);
        });

        this.slides.forEach((slide, index) => {
          const video = slide.querySelector('video');
          if (video) {
            if (index !== this.currentSlide) {
              video.pause();
              video.currentTime = 0;
            }
          }
        });

        this.isPlaying = false;
        this.updatePlayPauseButton();
        this.updateMuteButton();
      }

      goToSlide(index) {
        this.currentSlide = index;
        this.updateSlider();
        this.resetAutoplay();
      }

      nextSlide() {
        this.currentSlide = (this.currentSlide + 1) % this.slides.length;
        this.updateSlider();
        this.resetAutoplay();
      }

      prevSlide() {
        this.currentSlide = (this.currentSlide - 1 + this.slides.length) % this.slides.length;
        this.updateSlider();
        this.resetAutoplay();
      }

      togglePlayPause() {
        const currentVideo = this.getCurrentVideo();
        if (!currentVideo) return;

        if (currentVideo.paused) {
          const playPromise = currentVideo.play();
          if (playPromise !== undefined) {
            playPromise.then(() => {
              this.isPlaying = true;
              this.updatePlayPauseButton();
            }).catch((error) => {
              console.log('Auto-play was prevented:', error);
              this.isPlaying = false;
              this.updatePlayPauseButton();
            });
          }
        } else {
          currentVideo.pause();
          this.isPlaying = false;
          this.updatePlayPauseButton();
        }
      }

      toggleMute() {
        const currentVideo = this.getCurrentVideo();
        if (!currentVideo) return;

        currentVideo.muted = !currentVideo.muted;
        this.updateMuteButton();
      }

      getCurrentVideo() {
        const currentSlide = this.slides[this.currentSlide];
        return currentSlide ? currentSlide.querySelector('video') : null;
      }

      updatePlayPauseButton() {
        if (!this.playPauseBtn) return;

        const currentVideo = this.getCurrentVideo();
        const playIcon = this.playPauseBtn.querySelector('.play-icon');
        const pauseIcon = this.playPauseBtn.querySelector('.pause-icon');

        if (currentVideo && !currentVideo.paused && this.isPlaying) {
          playIcon.style.display = 'none';
          pauseIcon.style.display = 'block';
        } else {
          playIcon.style.display = 'block';
          pauseIcon.style.display = 'none';
        }
      }

      updateMuteButton() {
        if (!this.muteBtn) return;

        const currentVideo = this.getCurrentVideo();
        const volumeIcon = this.muteBtn.querySelector('.volume-icon');
        const muteIcon = this.muteBtn.querySelector('.mute-icon');

        if (currentVideo && currentVideo.muted) {
          volumeIcon.style.display = 'none';
          muteIcon.style.display = 'block';
        } else {
          volumeIcon.style.display = 'block';
          muteIcon.style.display = 'none';
        }
      }

      startAutoplay() {
        if (this.autoplayInterval) return;

        this.autoplayInterval = setInterval(() => {
          this.nextSlide();
        }, this.autoplayDelay);
      }

      stopAutoplay() {
        if (this.autoplayInterval) {
          clearInterval(this.autoplayInterval);
          this.autoplayInterval = null;
        }
      }

      resetAutoplay() {
        if (this.isAutoplay) {
          this.stopAutoplay();
          this.startAutoplay();
        }
      }

      disconnectedCallback() {
        this.stopAutoplay();
      }
    }

    customElements.define('video-slider-{{ ai_gen_id }}', VideoSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Video Slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Video Settings"
    },
    {
      "type": "video",
      "id": "video_1",
      "label": "Video 1"
    },
    {
      "type": "text",
      "id": "video_1_title",
      "label": "Video 1 title"
    },
    {
      "type": "video",
      "id": "video_2",
      "label": "Video 2"
    },
    {
      "type": "text",
      "id": "video_2_title",
      "label": "Video 2 title"
    },
    {
      "type": "video",
      "id": "video_3",
      "label": "Video 3"
    },
    {
      "type": "text",
      "id": "video_3_title",
      "label": "Video 3 title"
    },
    {
      "type": "video",
      "id": "video_4",
      "label": "Video 4"
    },
    {
      "type": "text",
      "id": "video_4_title",
      "label": "Video 4 title"
    },
    {
      "type": "video",
      "id": "video_5",
      "label": "Video 5"
    },
    {
      "type": "text",
      "id": "video_5_title",
      "label": "Video 5 title"
    },
    {
      "type": "header",
      "content": "Playback Settings"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay slider",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "Loop videos",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "muted",
      "label": "Mute videos by default",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_delay",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Autoplay delay",
      "default": 5
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dot indicators",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_video_controls",
      "label": "Show video controls",
      "default": true
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "video_height",
      "min": 300,
      "max": 800,
      "step": 50,
      "unit": "px",
      "label": "Video height",
      "default": 500
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 14,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 20
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active dot color",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Video Slider"
    }
  ]
}
{% endschema %}